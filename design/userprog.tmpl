             +--------------------------+
             | CSCC69                   |
             | PROJECT 2: USER PROGRAMS	|
             | DESIGN DOCUMENT          |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Arwin Fong arwin.fong@mail.utoronto.ca
Eric Fan ericcw.fan@mail.utoronto.ca

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* An autoincremented unique number for each fd */
static int fd_num = 1;           
/* List of all open files */
struct list all_files;
/* Lock for synch */
struct lock call_lock;
struct lock load_lock;

struct child_process
{
   tid_t tid;
   int exit_status;                    /* Exit status of child process */     
   bool has_exited;                    /* Has child exited */
   bool first_load;                    /* First load of child process */
   struct list_elem child_elem;        /* List element for child list */
   struct semaphore waiting;           /* Semaphore for waiting */
}

struct sys_file {
    int fd;
    tid_t fd_owner;
    struct file *file;
    struct list_elem file_elem;
};

struct thread
{
    /* Same attributes */

    // New additions
    #ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
    struct thread *parent;              /* Parent thread */
    struct list child_list;             /* List of child threads */
    #endif
}

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

When a file is opened, the file descriptor that is assigned is a the
global variable fd_num. This variable is pre-incremented before we
associate it with the open file. Therefore all fds will be 
unique throughout the OS.
---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
To read user data, our code will first check the fd that is passed into
the function. If the fd = STDOUT_FILENO then we return -1 since we are
not trying to output to the console. If the fd = STDIN_FILENO, we get
user input via input_getc() (unsigned)size amount of times. Else if the
fd is non-negative, that means we are reading from a file thus we read
using the given file_read() function.

To write user data, our code will first check the fd that is passed into
the function. If the fd = STDIN_FILENO then we return -1 since we are 
not trying to read user input on console. If the fd = STDOUT_FILENO, 
we output the buffer using putbuf(). Else if the fd is non-negative,
that means we are writing to a file thus we read using the given
file_write() function.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Our implementation of the "wait" system call pops the pid of the 
child process off the stack and calls process_wait with that pid.

In process_wait, we check if the current thread has no children. If 
the current thread has no children then we return -1 else the algorithm 
searches through the current thread's child_list to find the child_process
with pid child_tid.

If the child process has terminated, we remove the child_process from
the current_thread's child_list and return its exit status.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

Before we access the user program memory, we validate the address
using is_user_vaddr() and pagedir_get_page(). If any of these conditions
failed we want to terminate the process with exit(-1). 

For example when a "read" system call happens, we first validate 
---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

The "exec" system call acquires the lock "load_lock" when it has to 
load a new executable, before releasing it after the load is finished,
regardless of success or failure. 

"exec" saves the result of the load as "pid", which is used as the 
return value when "exec" terminates, passing TID_ERROR if it was a 
failure or the new tid_t value if it was a success.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?


>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
Advantages:
- Easy implementation for unique identification for fds to open files.

Disadvantages:
- If the OS opens too many fds overtime there may be an int overflow.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
There is no change in the identity mapping for tid_t and pid_t.
               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
