            +--------------------+
            | CSCC69             |
            | PROJECT 1: THREADS |
            | DESIGN DOCUMENT    |
            +--------------------+
   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
Arwin Fong arwin.fong@mail.utoronto.ca
Eric Fan <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
    /* No changes to exisiting members of the struct */

    /* New attribute for Project 1 Alarm Clock implementation */
    int64_t wakeup_tick;              
}

int64_t wakeup_tick - Once this variable hits 0, the with this tick will
be removed from the wake_list and go to the ready_list.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
Timer_sleep calls another function in thread.c called thread_sleep.
This function in thread.c inserts the current thread into a list
struct called "wake_list". Before it inserts into the list, the 
function blocks interrupts to handle multiple thread synchronization.
After inserting, we change the "wake_tick" of that thread to be the
amount of ticks it takes to wake it back up. Finally we block the thread
and re-enable interrupts.

In the timer interrupt handler, we call to the function thread_check_wake
in thread.c. What thread_check_wake does is, it starts at the beginning 
of the list, and loops through all elements. When it finds an element
to wake up, similarly to thread_sleep, it will disable interrupts, remove
the element from the wake_list and then set the wake_tick to 0 before
re-enabling interrupts.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
To minimize the amount of time spent in timer interrupt, sort
the wake_list by wakeup_tick. When checking which threads to wake up,
We only need to loop until we find a thread's "wakeup_tick" is above
the global_tick or when the wake_list is empty. This ensures that we
are not checking the other threads unnecessarily. 

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
Disabling interrupts helps synchronize multiple threads.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
To avoid race conditions when a timer interrupt occurs during a call to 
timer sleep(), our algorithm temporarily disable interrupts.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
This design was chosen since it is easy to keep track of all the threads
in the wake_list since pintos has provided the list implemntation already.
It is also easy to understand how the algorithm works, when we sleep the
thread, we remove it from the ready_list and put it on the wake_list and
when we are ready to wake it up we remove it from the sleep_list and
put it back on the ready_list. Previous design ideas did not have any
list sorting which meant we had to check every thread in the wake_list.
The current design involves sorting the item as the element enters the list.
This design is superior since it allows us to check threads that do not
need to wake up at most once.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
...

    int o_priority;                Desc: Original priority of thread
    struct list locks_held;        Desc: List of locks thread is holding
    struct lock *waiting_for;      Desc: Lock this thread is waiting for

...
  };

 struct lock 
  {
    ...
    struct list_elem lock_elem;    Desc: list_elem for locks_held in struct thread
    int max_priority;              Desc: Saves the highest priority among threads waiting
  }; 

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

The list of waiters is inserted in order, ensuring the highest priority
thread is popped off the list and unblocked

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?



>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?



---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
    /* No changes to exisiting members of the struct */

    /* New attribute for Project 1 Advanced Scheduler implementation */
    int nice;                           /* Nice value of thread */
    int recent_cpu;                     /* Recent CPU value of thread */
}

--- Global variable ---
static int load_avg;            /* System load average */

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0      0   0   0   63  61  59     A 
 4      4   0   0   62  61  59     A
 8      8   0   0   61  61  59     B      
12      8   4   0   61  60  59     A
16      12  4   0   60  60  59     B
20      12  8   0   60  59  59     A
24      16  8   0   59  59  59     C
28      16  8   4   59  59  58     B
32      16  12  4   59  58  58     A
36      20  12  4   58  58  58     C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

One ambiguity that made the table uncertain is when the recent_cpu was
updated and when priority is calculated for the current running thread.
To match the consistency with our scheduler, we incremented the tick first
and then calculated the current running thread. Another ambiguity is how
to round-robin schedule same priority threads. To resolve this issue,
the thread that hasn't used the CPU the longest would be chosen to run.
For example, if thread A reccently used the CPU and has the same priority
as thread B but thread B has not used the CPU in a while, thread B will 
be chosen to run next.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

Our code implements calculations for load_avg, recent_cpu, and priority
inside an interrupt context. This will likely affect the performance
since the implementation for the BSD Scheduler specifies that load_avg,
recent_cpu, and priority to be done every 100 or 4 ticks. In the case
where the calculation takes more than this time, race conditions may
possibly occur since we are inside an interrupt context. Thus our threads
will begin to preempt and slow down the performance.

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

Advantages: 
- recent_cpu, load_avg, and priority calculations separated by
  function
- fixed-point.h for efficient fixed point arithmetic.

Disadvantages:
- list_sort() and list_insert_ordered() are operations that loop through
  the entire list which can be time consuming and mess up the timing.

If we had more time, a better design would to create an efficient data
structure for the multi level feed queue rather than use the ready_list.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

To implement the fixed-point arithmetic we used function macros defined
in a separate header file. Creating a macro was an easy way to reference
operations without having to repeat the calculations or constants like
'f' in fixed-point arithmetic.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
